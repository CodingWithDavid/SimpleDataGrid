@page "/fetchdata"

@using UILab.Data
@using InternalLib
@using UILab.UIControls.DataGrid

@inject WeatherForecastService ForecastService
@inject IJSRuntime JSRuntime;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (data == null)
{
    @if (spinning)
    {
        <div class="spinner" style="background-image: url(@spinnerbgImage);"></div>
    }
}
else
{
    @if (spinning)
    {
        <div class="spinner" style="background-image: url(@spinnerbgImage);"></div>
    }

    <h3>Total Records: @data.Count</h3>

    <table class="table table-bordered table-striped table-hover table-sm" id="datatable">
        <thead>
            <tr>
                <th @onclick='(() => Sort("Date", 0))'>
                    <span>Date</span>
                    <span class="fa @(DataGridService.GetSortStyle(0, sortIndex, sortDirection))"></span>
                </th>

                <th @onclick='(() => Sort("Summary", 1))'>
                    <span>Summary</span>
                    <span class="fa @(DataGridService.GetSortStyle(1, sortIndex, sortDirection))"></span>
                </th>
                <th @onclick='(() => Sort("TemperatureC", 2))'>
                    <span>Temperature C</span>
                    <span class="fa @(DataGridService.GetSortStyle(2, sortIndex, sortDirection))"></span>
                </th>
                <th @onclick='(() => Sort("TemperatureF", 3))'>
                    <span>Temperature F</span>
                    <span class="fa @(DataGridService.GetSortStyle(3, sortIndex, sortDirection))"></span>
                </th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < data.Count; i++)
            {
                int index = i + 1;
                <tr @onclick='(() => RowClickEvent(index))'>
                    <td>@data[i].Date.ToShortDateString()</td>
                    <td>@data[i].Summary</td>
                    <td>@data[i].TemperatureC</td>
                    <td>@data[i].TemperatureF</td>
                </tr>
            }
        </tbody>
    </table>
    @if (data.Count > 25)
    {
        <nav aria-label="Page navigation example">
            <ul class="pagination">
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </a>
                </li>
                @for(int i = 1; i <= pageCount; i++)
                { 
                    <li class="page-item"><a class="page-link" href="#">@i</a></li>
                }
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Next</span>
                    </a>
                </li>
            </ul>
        </nav>
    }
}

@code {

    private List<WeatherForecast> data;
    private List<WeatherForecast> dataCollection;
    private bool sortDirection = false;
    private int sortIndex = 0;
    private string spinnerbgImage = "img/spinner.gif";
    private bool spinning = true;
    private int pageSize = 25;
    private int pageCount = 0;

    protected override async Task OnInitializedAsync()
    {
        spinning = true;
        await Task.Delay(1);
        dataCollection = await ForecastService.GetForecastAsync(DateTime.Now);
        pageCount = DataGridService.GetPageCount(pageSize, data.Count);
        if(pageCount > 1)
        {
            data = (from a in dataCollection
                    select a).Take(pageSize);
        }
        spinning = false;
    }

    public async Task Sort(string sortProperty, int index)
    {
        string sortDir = "OrderBy";

        if (!sortDirection)
        {
            sortDir = "OrderByDescending";
        }

        data = RecordSorterHelper.ApplyOrder<WeatherForecast>(data.AsQueryable(), sortProperty, sortDir).ToList();
        sortDirection = !sortDirection;
        sortIndex = index;

        await JSRuntime.InvokeVoidAsync("hightlight_row", 0);
    }

    private async Task RowClickEvent(int rowIndex)
    {
        await JSRuntime.InvokeVoidAsync("hightlight_row", rowIndex);
    }
}
